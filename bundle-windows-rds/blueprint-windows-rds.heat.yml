#
##
### Written by the CAT (Cloudwatt Automation Team)
##
#
heat_template_version: 2013-05-23


description:  RDS test installation

parameters:

  key_name:
    type: string
    description : Name of a KeyPair to enable access to the instances
 
  ad_srv_name:
    type: string
    default: rds-farm-ad
  rds_gw_name:
    type: string
    default: rds-farm-gw
  rds_shost_name:
    type: string
    default: rds-farm-sh01
    
  rds_shost_image:
    type: string
    default: 2de643b8-3a67-4806-91e6-ec7b221ef22b
 
  domain_name:
    type: string
    default: rdsfarm.local
  domain_netbios:
    type: string
    default: RDSFARM
  domain_password:
    type: string
    default: RDSFarm123
    
  ad_ip:
    type: string
    default: 10.0.250.199
    
  floating_network_id:
    type: string
    default: 6ea98324-0f14-49f6-97c0-885d1b8dc517

resources:
    net:
        type: OS::Neutron::Net

    subnet:
        type: OS::Neutron::Subnet
        properties:
          network_id: { get_resource: net }
          ip_version: 4
          cidr: 10.0.250.0/24
          allocation_pools:
            - { start: 10.0.250.100, end: 10.0.250.199 }
          dns_nameservers: [ { get_param: ad_ip} ]

    ad_nsg:
        type: OS::Neutron::SecurityGroup
        properties:
          rules:
            #- { direction: ingress, protocol: TCP, port_range_min: 3389, port_range_max: 3389 }
            - { direction: ingress, protocol: TCP }
            - { direction: ingress, protocol: UDP }
            - { direction: ingress, protocol: ICMP }
            - { direction: egress, protocol: ICMP }
            - { direction: egress, protocol: TCP }
            - { direction: egress, protocol: UDP }
    rds_gw_nsg:
        type: OS::Neutron::SecurityGroup
        properties:
          rules:
            - { direction: ingress, protocol: TCP }
            - { direction: ingress, protocol: UDP }
            - { direction: ingress, protocol: ICMP }
            - { direction: egress, protocol: ICMP }
            - { direction: egress, protocol: TCP }
            - { direction: egress, protocol: UDP }
    rds_shost_nsg:
        type: OS::Neutron::SecurityGroup
        properties:
          rules:
            - { direction: ingress, protocol: TCP }
            - { direction: ingress, protocol: UDP }
            - { direction: ingress, protocol: ICMP }
            - { direction: egress, protocol: ICMP }
            - { direction: egress, protocol: TCP }
            - { direction: egress, protocol: UDP }
    
    floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network_id: { get_param: floating_network_id }

    
    
    ad_srv:
        type: OS::Nova::Server
        properties:
          name: { get_param: ad_srv_name }
          image: 2de643b8-3a67-4806-91e6-ec7b221ef22b
          flavor: n2.cw.standard-1
          key_name: { get_param: key_name }
          networks:
          - { network: { get_resource: net }, fixed_ip: {get_param: ad_ip } }
          security_groups:
            - { get_resource: ad_nsg }
          user_data:
            str_replace:
                template: |
                    #ps1_sysnative
                    $ErrorActionPreference = 'Stop'
                    Install-WindowsFeature -Name AD-domain-services -IncludeManagementTools
                    $user = [ADSI]'WinNT://./Administrator'
                    $user.SetPassword('domain_password')
                    Import-Module ADDSDeployment
                    $safedomainpwd = "domain_password" | ConvertTo-SecureString -AsPlainText -Force
                    Install-AddsForest `
                        -CreateDnsDelegation:$false `
                        -DatabasePath "C:\Windows\NTDS" `
                        -DomainMode "Win2012R2" `
                        -DomainName "domain_name" `
                        -DomainNetbiosName "domain_netbios" `
                        -ForestMode "Win2012R2" `
                        -InstallDns:$true `
                        -LogPath "C:\Windows\NTDS" `
                        -NoRebootOnCompletion `
                        -SysvolPath "C:\Windows\SYSVOL" `
                        -SafeModeAdministratorPassword $safedomainpwd `
                        -Force:$true
                    exit 1001
                    
                    # import-module RemoteDesktop
                    
                params:
                    domain_name: { get_param: domain_name }
                    domain_netbios: { get_param: domain_netbios }
                    domain_password: { get_param: domain_password }
   
    
    rds_gw_srv:
        type: OS::Nova::Server
        depends_on: rds_shost_srv
        properties:
          name: { get_param: rds_gw_name }
          image: 2de643b8-3a67-4806-91e6-ec7b221ef22b
          flavor: n2.cw.standard-2
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: net }
          security_groups:
            - { get_resource: rds_gw_nsg }
          user_data:
            str_replace:
                template: |
                    #ps1_sysnative
                    Sleep 300
                    
                    $domain = "rdsfarm.local"
                    $password = "domain_password" | ConvertTo-SecureString -asPlainText -Force
                    $username = "$domain\Administrator" 
                    $credential = New-Object System.Management.Automation.PSCredential($username,$password)
                    Add-Computer -DomainName $domain -Credential $credential			
                    exit 1001
                    
                    #after reboot
                    import-module RemoteDesktop
                    New-SessionDeployment -ConnectionBroker rds-farm-gw.rdsfarm.local -WebAccessServer rds-farm-gw.rdsfarm.local -SessionHost rds-farm-sh01.rdsfarm.local
                    New-RDSessionCollection -CollectionName CWSessionCollection -SessionHost rds-farm-sh01.rdsfarm.local -CollectionDescription “Collection exemple pour RDS sur Cloudwatt” -ConnectionBroker rds-farm-gw.rdsfarm.local
                    New-RDRemoteApp -Alias Wordpad -DisplayName WordPad -FilePath "C:\Program Files\Windows NT\Accessories\wordpad.exe" -ShowInWebAccess 1 -collectionname CWSessionCollection -ConnectionBroker rds-farm-gw.rdsfarm.local
                    Set-RDRemoteApp -CollectionName CWSessionCollection -Alias Wordpad -ShowInWebAccess $true -ConnectionBroker rds-farm-gw.rdsfarm.local

                params:
                    domain_password: { get_param: domain_password }
    
    floating_ip_link:
        type: OS::Nova::FloatingIPAssociation
        properties:
          floating_ip: { get_resource: floating_ip }
          server_id: { get_resource: rds_gw_srv }
    
    rds_shost_srv:
        type: OS::Nova::Server
        depends_on: ad_srv
        properties:
          name: { get_param: rds_shost_name }
          image: { get_param: rds_shost_image }
          flavor: n2.cw.standard-1
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: net }
          security_groups:
            - { get_resource: rds_shost_nsg }
          user_data:
            str_replace:
                template: |
                    #ps1_sysnative
                    Sleep 300
                    
                    $domain = "rdsfarm.local"
                    $password = "domain_password" | ConvertTo-SecureString -asPlainText -Force
                    $username = "$domain\Administrator" 
                    $credential = New-Object System.Management.Automation.PSCredential($username,$password)
                    Add-Computer -DomainName $domain -Credential $credential			
                    exit 1001
                params:
                    domain_password: { get_param: domain_password }