#
##
### Written by the CAT (Cloudwatt Automation Team)
##
#
heat_template_version: 2013-05-23


description:  RDS test installation

parameters:

  key_name:  
    type: string  
    description: The Name of a KeyPair to enable access to the instances
  ad_srv_name:  
    type: string  
    description : The name of the Domain Controller (Active Directory) server in the farm
    default: rds-farm-ad
  rds_gw_name:  
    type: string  
    description: The name of the main RDS server in the farm  
    default: rds-farm-gw
  rds_shost_name:  
    type: string  
    description: The name of the (first) Session Host server in the farm  
    default: rds-farm-sh01  
  rds_shost_image:  
    type: string  
    description: The ID of the image for the Session Host server  
    default: 2de643b8-3a67-4806-91e6-ec7b221ef22b
  domain_name:  
    type: string  
    description: The name of the Active Directory domain to be configured  
    default: rdsfarm.local
  domain_netbios:  
    type: string  
    description: The NetBios name of the Active Directory domain to be configured  
    default: RDSFARM
  domain_password:  
    type: string  
    description: The administrative password of the Active Directory domain to be configured  
    default: Pa$$w0rd
  ad_ip: 
    type: string  
    description: The IP of the Domain Controller (AD) server  
    default: 10.0.250.100  
  floating_network_id:   
    type: string  
    description: The ID of the floating network to be used for the public (floating) IP which will be provisionned  

resources:
    net:
        type: OS::Neutron::Net

    subnet:
        type: OS::Neutron::Subnet
        properties:
          network_id: { get_resource: net }
          ip_version: 4
          cidr: 10.0.250.0/24
          allocation_pools:
            - { start: 10.0.250.100, end: 10.0.250.199 }
          dns_nameservers: [ { get_param: ad_ip} ]

    ad_nsg:
        type: OS::Neutron::SecurityGroup
        properties:
          rules:
            - { direction: ingress, protocol: TCP }
            - { direction: ingress, protocol: UDP }
            - { direction: ingress, protocol: ICMP }
            - { direction: egress, protocol: ICMP }
            - { direction: egress, protocol: TCP }
            - { direction: egress, protocol: UDP }
    rds_gw_nsg:
        type: OS::Neutron::SecurityGroup
        properties:
          rules:
            - { direction: ingress, protocol: TCP }
            - { direction: ingress, protocol: UDP }
            - { direction: ingress, protocol: ICMP }
            - { direction: egress, protocol: ICMP }
            - { direction: egress, protocol: TCP }
            - { direction: egress, protocol: UDP }
    rds_shost_nsg:
        type: OS::Neutron::SecurityGroup
        properties:
          rules:
            - { direction: ingress, protocol: TCP }
            - { direction: ingress, protocol: UDP }
            - { direction: ingress, protocol: ICMP }
            - { direction: egress, protocol: ICMP }
            - { direction: egress, protocol: TCP }
            - { direction: egress, protocol: UDP }
    
    floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network_id: { get_param: floating_network_id }

    
    
    ad_srv:
        type: OS::Nova::Server
        properties:
          name: { get_param: ad_srv_name }
          image: 2de643b8-3a67-4806-91e6-ec7b221ef22b
          flavor: n2.cw.standard-1
          key_name: { get_param: key_name }
          networks:
          - { network: { get_resource: net }, fixed_ip: {get_param: ad_ip } }
          security_groups:
            - { get_resource: ad_nsg }
          user_data:
            str_replace:
                template: |
                    #ps1_sysnative
                    $ErrorActionPreference = 'Stop'
                    if ((Get-WmiObject Win32_ComputerSystem).domain -eq "WORKGROUP") {
                        Install-WindowsFeature -Name AD-domain-services -IncludeManagementTools
                        $user = [ADSI]'WinNT://./Administrator'
                        $user.SetPassword('domain_password')
                        Import-Module ADDSDeployment
                        $safedomainpwd = "domain_password" | ConvertTo-SecureString -AsPlainText -Force
                        Install-AddsForest `
                            -CreateDnsDelegation:$false `
                            -DatabasePath "C:\Windows\NTDS" `
                            -DomainMode "Win2012R2" `
                            -DomainName "domain_name" `
                            -DomainNetbiosName "domain_netbios" `
                            -ForestMode "Win2012R2" `
                            -InstallDns:$true `
                            -LogPath "C:\Windows\NTDS" `
                            -NoRebootOnCompletion `
                            -SysvolPath "C:\Windows\SYSVOL" `
                            -SafeModeAdministratorPassword $safedomainpwd `
                            -Force:$true
                        exit 1003
                    }
                    
                params:
                    domain_name: { get_param: domain_name }
                    domain_netbios: { get_param: domain_netbios }
                    domain_password: { get_param: domain_password }
   
    
    
    
    
    
    rds_shost_srv:
        type: OS::Nova::Server
        depends_on: ad_srv
        properties:
          name: { get_param: rds_shost_name }
          image: { get_param: rds_shost_image }
          flavor: n2.cw.standard-1
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: net }
          security_groups:
            - { get_resource: rds_shost_nsg }
          user_data:
            str_replace:
                template: |
                    #ps1_sysnative
                    $ErrorActionPreference = 'Stop'
                    if ((Get-WmiObject Win32_ComputerSystem).domain -eq "WORKGROUP") {
                        echo "Waiting for the domain to come up..."
                        Sleep 240
                        echo "Joining domain..."
                        $password = "domain_password" | ConvertTo-SecureString -asPlainText -Force
                        $username = "domain_netbios\Administrator" 
                        $credential = New-Object System.Management.Automation.PSCredential($username,$password)
                        Add-Computer -DomainName "domain_name" -Credential $credential
                        echo "Domain joined. Will reboot next."  			
                        exit 1003
                    }
                params:
                    domain_name: { get_param: domain_name }
                    domain_netbios: { get_param: domain_netbios }
                    domain_password: { get_param: domain_password }
                    
                    
    rds_gw_srv:
        type: OS::Nova::Server
        depends_on: rds_shost_srv
        properties:
          name: { get_param: rds_gw_name }
          image: 2de643b8-3a67-4806-91e6-ec7b221ef22b
          flavor: n2.cw.standard-2
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: net }
          security_groups:
            - { get_resource: rds_gw_nsg }
          user_data:
            str_replace:
                template: |
                    #ps1_sysnative
                    $ErrorActionPreference="Stop"
                    
                    $domain = "domain_name"
                    $password = "domain_password"
                    $securePassword = $password | ConvertTo-SecureString -asPlainText -Force
                    $username = "domain_netbios\Administrator" 
                    $credential = New-Object System.Management.Automation.PSCredential($username,$securePassword)
                        
                    if ((Get-WmiObject Win32_ComputerSystem).domain -eq "WORKGROUP") {
                        echo "Waiting for the domain to come up..."
                        Sleep 240
                        echo "Joining domain..."
                        Add-Computer -DomainName $domain -Credential $credential
                        echo "Domain joined. Will reboot next."                        
                        exit 1003
                    } else {
                        echo "After joining domain. Waiting for the session host server to come online..."
                        #Sleep 120
                        echo "Schedule execution of the RDP deployment script (in task scheduler)..."
                        $taskName = "Setup RDS Farm"
                        $psScript = `
                            '
                            $ErrorActionPreference="Stop"
                            import-module RemoteDesktop
                            
                            New-SessionDeployment `
                                -ConnectionBroker rds-farm-gw.rdsfarm.local `
                                -WebAccessServer rds-farm-gw.rdsfarm.local `
                                -SessionHost rds-farm-sh01.rdsfarm.local
                                
                            $externalFQDN = "ip-" + "ip_floating".Replace(".","-") + ".rev.cloudwatt.com"
                            
                            Add-RDServer -Server rds-farm-ad.rdsfarm.local -Role RDS-LICENSING -ConnectionBroker rds-farm-gw.rdsfarm.local
                            Set-RDLicenseConfiguration -LicenseServer rds-farm-ad.rdsfarm.local -Mode PerUser -ConnectionBroker rds-farm-gw.rdsfarm.local -Force

                            Add-RDServer -Server rds-farm-gw.rdsfarm.local -Role RDS-GATEWAY -ConnectionBroker rds-farm-gw.rdsfarm.local -GatewayExternalFqdn $externalFQDN
                            Set-RDDeploymentGatewayConfiguration -GatewayMode Custom -GatewayExternalFqdn $externalFQDN -LogonMethod Password -UseCachedCredentials $True -BypassLocal $True -ConnectionBroker rds-farm-gw.rdsfarm.local -Force

                            $certPath = "C:\Windows\Temp\RDSCertificate.pfx"
                            
                            $password = "domain_password"
                            $securePassword = $password | ConvertTo-SecureString -asPlainText -Force
                            New-RDCertificate -Role RDWebAccess -DnsName $externalFQDN -Password $securePassword  -ExportPath $certPath -ConnectionBroker rds-farm-gw.rdsfarm.local -Force
                            Set-RDCertificate -Role RDPublishing -Password $securePassword -ImportPath $certPath -ConnectionBroker rds-farm-gw.rdsfarm.local -Force
                            Set-RDCertificate -Role RDGateway -Password $securePassword -ImportPath $certPath -ConnectionBroker rds-farm-gw.rdsfarm.local -Force
                            # Set-RDCertificate -Role RDRedirector -Password $securePassword -ImportPath $certPath -ConnectionBroker rds-farm-gw.rdsfarm.local -Force
                            
                            $collectionName = "RDS Demo Collection"
                            
                            New-RDSessionCollection `
                                -CollectionName $collectionName `
                                -SessionHost rds-farm-sh01.rdsfarm.local `
                                -CollectionDescription "Collection exemple pour RDS sur Cloudwatt" `
                                -ConnectionBroker rds-farm-gw.rdsfarm.local;
                            
                            ## how to publish a RemoteApp application
                            #New-RDRemoteApp `
                            #   -Alias Wordpad `
                            #   -DisplayName WordPad `
                            #   -FilePath "C:\Program Files\Windows NT\Accessories\wordpad.exe" `
                            #   -ShowInWebAccess 1 `
                            #   -collectionname $collectionName `
                            #   -ConnectionBroker rds-farm-gw.rdsfarm.local;
                            
                            ## how to publish the Remote Desktop connection
                            Set-RDRemoteDesktop -CollectionName $collectionName -ConnectionBroker rds-farm-gw.rdsfarm.local -ShowInWebAccess $True -Force
                            
                            cp $certPath C:\windows\Web\RDWeb\Pages
                            '
                                
                        $scriptPath = "C:\Windows\Temp\installRDS.ps1"
                        $psScript > $scriptPath
                        $cmdArgument = "/C ""powershell.exe -NoProfile -Executionpolicy bypass -file $scriptPath"""
                        $action = New-ScheduledTaskAction -Execute "cmd.exe" -Argument "$cmdArgument > C:\Windows\Temp\installRDS.log 2>&1"
                        $execTime = (get-date).AddMinutes(1)
                        $trigger = New-ScheduledTaskTrigger -Once -At $execTime
                        $settings = New-ScheduledTaskSettingsSet 
                        $task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings 
                        Register-ScheduledTask -TaskName $taskName -InputObject $task -User $username -Password $password	
                        echo "Task scheduled after a minute. Check the execution in the task Scheduler."
                    }

                params:
                    domain_name: { get_param: domain_name }
                    domain_netbios: { get_param: domain_netbios }
                    domain_password: { get_param: domain_password }
                    ip_floating: { get_attr: [floating_ip, floating_ip_address]}
                    
                    
                    
    floating_ip_link:
        type: OS::Nova::FloatingIPAssociation
        properties:
          floating_ip: { get_resource: floating_ip }
          server_id: { get_resource: rds_gw_srv }